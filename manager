#!/usr/bin/python

import sys
import os
from subprocess import Popen, PIPE
from os import path

def parseArguments():
	package = command = None
	options = {}
	arguments = list(sys.argv)
	if len(sys.argv) == 1:
		print './stow [package] <command>'
		exit(1)	
	for arg in sys.argv[1:]:
		if arg.startswith('--'):
			nameAndValue = arg[2:].split('=', 1)
			if len(nameAndValue)==1:
				nameAndValue.append(True)
			options[nameAndValue[0]] = nameAndValue[1]
		elif not package:
			package = arg
		elif not command:
			command = arg
	if package != None and command == None:
		command = package
		package = None
	return {'package': package,
			'command': command,
			'options': options}
			
def validateArguments(args):
	if not args['command'] in ['install', 'uninstall']:
		print 'invalid command'
		exit(1)

def getPackageList():
	root = '.'
	packages = [ f for f in os.listdir(root) if path.isdir(path.join(root, f)) and f != '.git' ]
	return packages

def createLinks(sourceRoot, target):
	#for item in os.listdir(sourceRoot):
		# sourceFile = sourceRoot+s+item
		# targetFile = target+s+item
	for root, dirs, files in os.walk(sourceRoot, topdown=False):
		for item in files:
			sourceFile = root+s+item
			targetFile = root.replace(sourceRoot, target)+s+item
			if item in ['pre-install', 'post-install']:
				continue
			if args['command'] == 'install':
				if path.islink(targetFile):
					if (os.readlink(targetFile) != sourceFile):				
						removeFile(targetFile, 'Link exists but is invalid ')
					else:
						if 'v' in args['options']:
							print 'File ok', targetFile
				elif path.exists(targetFile):
					removeFile(targetFile, 'File already exists')
				if not path.lexists(targetFile):
					targetDir = targetFile[0:targetFile.rfind(s)]
					if not path.isdir(targetDir):
						run('mkdir -p '+targetDir)
					run('ln -s '+sourceFile+' '+targetFile)
			if args['command'] == 'uninstall':
				run('rm '+targetFile)

def removeFile(filename, message):
	if path.exists(filename) and 'force' in args['options']:
		run('rm -rf '+filename)
	else:
		print message, filename

def executeInstallScript(package, script):
	script = './'+package+s+script
	if path.isfile(script):
		return run(script) == 0
	return None
	
def run(cmd):
	print ' '+cmd
	p = Popen(cmd , shell=True, stdout=PIPE, stderr=PIPE)
	out, err = p.communicate()
	output = out.strip() + err.strip()
	if output:
		print output
	return p.returncode

args = parseArguments()
validateArguments(args)
s = os.sep
source = path.abspath('./')
target = path.expandvars('$HOME')
packages = [args['package']] if args['package'] else getPackageList()
for package in packages:
	print 'install package',package
	if args['command'] == 'install':
		if executeInstallScript(package, 'pre-install') == False:
			print 'pre-install script failed'
			exit(1)
	createLinks(source+s+package, target)
	if args['command'] == 'install':
		executeInstallScript(package, 'post-install')
