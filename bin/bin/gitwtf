#!/bin/bash
#set -x
#set -e

# config start
projectPath="`pwd`/"
gitSearchPaths=( "${projectPath}.git" "${projectPath}vendor/nokaut/" )
# config end

colorPath="38;5;242"
colorPath2="38;5;252;1"
colorBranch="38;5;3"
colorInfo="38;5;70"
colorWarning="38;5;13"

if [ "$1" == "-h" ]; then
	echo "$0 [option]
-v		verbose mode
-c <command>	execute command on every repository
--branches	list branches
--lbranches	list local branches
--switch <branch> switch to branch (if it exists) on every repository
--update	update all repositories
-s		short output
"
	exit 1
fi
[ "$1" == "-v" ] && verbose=1 || verbose=0
[ "$1" == "-c" -a ! -z "$2" ] && command="$2"
[ "$1" == "-i" ] && inspectRemoteBranches=1 || inspectRemoteBranches=0
[ "$1" == "--branches" ] && command="git branch -av"
[ "$1" == "--lbranches" ] && command="git branch -v"
[ "$1" == "--switch" -a ! -z "$2" ] && command="git show-branch $2 >/dev/null && git checkout $2"
[ "$1" == "--update" ] && command="git rev-parse --abbrev-ref HEAD | xargs git pull origin"
[ "$1" == "-s" ] && shortOutput=1 || shortOutput=0

gitLogFormat="%s %C(dim normal)%h %cr %an%d%C(reset)"
indent1="sed 's/^/    /'"
indent2="sed 's/^/      /' | sed '\${/^\$/!s/\$/\n/;}'"
indent3="sed 's/^/        /'"

git config --get user.name>/dev/null || echo -e "\E[${colorWarning}mSet your user name! git config --global user.name 'Noob'\033[0m"

function pf {
	[ -z "$1" -o $1 -eq 0 ] && return
	[ $1 -eq 1 ] && echo $2 || echo "${2}s"
}

# gets all git repositories within given path
function findGitRepositories {
	unset gitRepositories i
	while IFS= read -r -u3 -d $'\n' file; do
	    gitRepositories[i++]="$file"
	done 3< <(find "$1" -maxdepth 5 -type d -name .git | sort )
}

function processDetailedData {
	lines="$3"
	noun="$1"
	message="$2"
	if [ ! -z "$lines" ]; then
		count="`echo -e "$lines" | wc -l`"
		if [ "$shortOutput" -eq 0 ]; then
			echo -e "\E[${colorWarning}m$count `pf $count $noun` $message\033[0m" | eval "$indent1"
		else
			echo -ne " | \E[${colorWarning}m$count `pf $count $noun` $message\033[0m"
		fi
		[ $verbose -eq 1 ] && echo "$lines" | eval "$indent2"
		return $count
	fi
	return 0
}

function processGitRepository {
	gitRepository="$1"
	cd "$gitRepository/.."

	displayPath="`pwd`/"
	if [ "$shortOutput" -eq 1 ]; then
		displayPath="`basename $displayPath`"
		echo -en "$displayPath";
	else
		displayPath="`echo ${displayPath/$projectPath//} | sed \"s/\/\([^\/]*\)\/$/\/\x1b[${colorPath2}m\1/\"`"
		echo -e "\x1b[${colorPath}m.$displayPath\x1b[0m";
	fi

	branch="`git rev-parse --abbrev-ref HEAD`"
	echo "`git branch -r`" | egrep "/$branch$">/dev/null && branchIsTracked=1 || branchIsTracked=0
	echo "`git branch`" | grep " develop">/dev/null && masterBranch="develop" || masterBranch="master"

	if [ ! -z "$command" ]; then
		eval "$command"  | eval "$indent1"
		return $?
	fi

	if [ "$inspectRemoteBranches" -eq 1 ]; then
		while IFS= read -r -u3 -d $'\n' branch; do
			echo -e "\E[${colorBranch}m$branch\E[0m"
		    git log --abbrev-commit --color --pretty=format:"$gitLogFormat" "remotes/origin/$masterBranch".."${branch// /}" | eval "$indent2"
		done 3< <(git branch -a | grep -v HEAD )
		return
	fi

	if [ "$shortOutput" -eq 0 ]; then
		echo -e "\E[${colorBranch}m$branch\E[0m" | eval "$indent1"
	else 
		echo -en " \E[${colorBranch}m$branch\E[0m"
	fi

	if [ "$branch" != "(no branch)" ]; then
		if [ "$shortOutput" -eq 0 ]; then
			[ $branchIsTracked -eq 0 ] && echo -e "\E[${colorInfo}mNOT tracked\033[0m" | eval "$indent1"
		else
			[ $branchIsTracked -eq 0 ] && echo -ne " \E[${colorInfo}mNOT tracked\033[0m"
		fi

		notCommited=$(git status -s)
		processDetailedData "change" "not commited" "$notCommited"

		if [ $branchIsTracked -eq 1 ]; then
			notPushed=$(git log --abbrev-commit --color --pretty=format:"$gitLogFormat" --branches --not --remotes --decorate | grep "`git config --get user.name`")
			processDetailedData "commit" "not pushed" "$notPushed"
		fi

		if [ "$branch" != "master" ]; then
			commits=$(git log --abbrev-commit --color --pretty=format:"$gitLogFormat" "$masterBranch".."$branch")
			processDetailedData "commit" "ahead of $masterBranch" "$commits"
		fi
	fi

	if [ "$shortOutput" -eq 1 ]; then
		echo 
	fi
	cd "$projectPath"
}

for gitSearchPath in "${gitSearchPaths[@]}"; do
	if [ "$gitSearchPath" == *.git ]; then
		processGitRepository "$gitSearchPath"
	else
		if [ -d "$gitSearchPath" ]; then
			findGitRepositories "$gitSearchPath"
			for gitRepository in "${gitRepositories[@]}"; do
				processGitRepository "$gitRepository"
			done
		fi
	fi
done
